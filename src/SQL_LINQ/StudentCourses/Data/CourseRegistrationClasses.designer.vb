'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="CourseRegistration")>  _
Partial Public Class CourseRegistrationClassesDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertCourse(instance As Course)
    End Sub
  Partial Private Sub UpdateCourse(instance As Course)
    End Sub
  Partial Private Sub DeleteCourse(instance As Course)
    End Sub
  Partial Private Sub InsertStudent(instance As Student)
    End Sub
  Partial Private Sub UpdateStudent(instance As Student)
    End Sub
  Partial Private Sub DeleteStudent(instance As Student)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.StudentCourses.My.MySettings.Default.CourseRegistrationConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Courses() As System.Data.Linq.Table(Of Course)
		Get
			Return Me.GetTable(Of Course)
		End Get
	End Property
	
	Public ReadOnly Property Students() As System.Data.Linq.Table(Of Student)
		Get
			Return Me.GetTable(Of Student)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Courses")>  _
Partial Public Class Course
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As String
	
	Private _Student_Id As Short
	
	Private _Credits As Short
	
	Private _Grade As Double
	
	Private _Student As EntityRef(Of Student)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As String)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnStudent_IdChanging(value As Short)
    End Sub
    Partial Private Sub OnStudent_IdChanged()
    End Sub
    Partial Private Sub OnCreditsChanging(value As Short)
    End Sub
    Partial Private Sub OnCreditsChanged()
    End Sub
    Partial Private Sub OnGradeChanging(value As Double)
    End Sub
    Partial Private Sub OnGradeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Student = CType(Nothing, EntityRef(Of Student))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Id() As String
		Get
			Return Me._Id
		End Get
		Set
			If (String.Equals(Me._Id, value) = false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_Id", DbType:="SmallInt NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Student_Id() As Short
		Get
			Return Me._Student_Id
		End Get
		Set
			If ((Me._Student_Id = value)  _
						= false) Then
				If Me._Student.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnStudent_IdChanging(value)
				Me.SendPropertyChanging
				Me._Student_Id = value
				Me.SendPropertyChanged("Student_Id")
				Me.OnStudent_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Credits", DbType:="SmallInt NOT NULL")>  _
	Public Property Credits() As Short
		Get
			Return Me._Credits
		End Get
		Set
			If ((Me._Credits = value)  _
						= false) Then
				Me.OnCreditsChanging(value)
				Me.SendPropertyChanging
				Me._Credits = value
				Me.SendPropertyChanged("Credits")
				Me.OnCreditsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Grade", DbType:="Float NOT NULL")>  _
	Public Property Grade() As Double
		Get
			Return Me._Grade
		End Get
		Set
			If ((Me._Grade = value)  _
						= false) Then
				Me.OnGradeChanging(value)
				Me.SendPropertyChanging
				Me._Grade = value
				Me.SendPropertyChanged("Grade")
				Me.OnGradeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Student_Course", Storage:="_Student", ThisKey:="Student_Id", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Student() As Student
		Get
			Return Me._Student.Entity
		End Get
		Set
			Dim previousValue As Student = Me._Student.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Student.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Student.Entity = Nothing
					previousValue.Courses.Remove(Me)
				End If
				Me._Student.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Courses.Add(Me)
					Me._Student_Id = value.Id
				Else
					Me._Student_Id = CType(Nothing, Short)
				End If
				Me.SendPropertyChanged("Student")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Students")>  _
Partial Public Class Student
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Short
	
	Private _LastName As String
	
	Private _Status As Short
	
	Private _Major As String
	
	Private _Courses As EntitySet(Of Course)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Short)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnLastNameChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As Short)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnMajorChanging(value As String)
    End Sub
    Partial Private Sub OnMajorChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Courses = New EntitySet(Of Course)(AddressOf Me.attach_Courses, AddressOf Me.detach_Courses)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="SmallInt NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Id() As Short
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me.OnLastNameChanging(value)
				Me.SendPropertyChanging
				Me._LastName = value
				Me.SendPropertyChanged("LastName")
				Me.OnLastNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="SmallInt NOT NULL")>  _
	Public Property Status() As Short
		Get
			Return Me._Status
		End Get
		Set
			If ((Me._Status = value)  _
						= false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Major", DbType:="VarChar(5) NOT NULL", CanBeNull:=false)>  _
	Public Property Major() As String
		Get
			Return Me._Major
		End Get
		Set
			If (String.Equals(Me._Major, value) = false) Then
				Me.OnMajorChanging(value)
				Me.SendPropertyChanging
				Me._Major = value
				Me.SendPropertyChanged("Major")
				Me.OnMajorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Student_Course", Storage:="_Courses", ThisKey:="Id", OtherKey:="Student_Id")>  _
	Public Property Courses() As EntitySet(Of Course)
		Get
			Return Me._Courses
		End Get
		Set
			Me._Courses.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Courses(ByVal entity As Course)
		Me.SendPropertyChanging
		entity.Student = Me
	End Sub
	
	Private Sub detach_Courses(ByVal entity As Course)
		Me.SendPropertyChanging
		entity.Student = Nothing
	End Sub
End Class
